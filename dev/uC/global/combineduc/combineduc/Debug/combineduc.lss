
combineduc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000890  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800064  00800064  00000928  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc6  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000543  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000639  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d8  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	54 c3       	rjmp	.+1704   	; 0x6b8 <__vector_7>
  10:	6f c3       	rjmp	.+1758   	; 0x6f0 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e9       	ldi	r30, 0x90	; 144
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 39       	cpi	r26, 0x9A	; 154
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	cb d1       	rcall	.+918    	; 0x3f0 <main>
  5a:	18 c4       	rjmp	.+2096   	; 0x88c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_2>:
}

/**
 *  Interrupt Service Routine for Pin Change in PCIE (PORTB).
 */
ISR(PCINT_vect) {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	4f 93       	push	r20
  6e:	5f 93       	push	r21
  70:	6f 93       	push	r22
  72:	7f 93       	push	r23
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
	// isolate changed pins
	uint8_t changed = SPI_S_PIN_REG ^ prev_pin_b;
  80:	26 b3       	in	r18, 0x16	; 22
  82:	30 91 68 00 	lds	r19, 0x0068
  86:	32 27       	eor	r19, r18
	
	switch (cur_state) {
  88:	20 91 6c 00 	lds	r18, 0x006C
  8c:	22 30       	cpi	r18, 0x02	; 2
  8e:	71 f1       	breq	.+92     	; 0xec <__vector_2+0x8e>
  90:	18 f4       	brcc	.+6      	; 0x98 <__vector_2+0x3a>
  92:	21 30       	cpi	r18, 0x01	; 1
  94:	41 f0       	breq	.+16     	; 0xa6 <__vector_2+0x48>
  96:	4c c1       	rjmp	.+664    	; 0x330 <__stack+0x1d1>
  98:	23 30       	cpi	r18, 0x03	; 3
  9a:	09 f4       	brne	.+2      	; 0x9e <__vector_2+0x40>
  9c:	5b c0       	rjmp	.+182    	; 0x154 <__vector_2+0xf6>
  9e:	24 30       	cpi	r18, 0x04	; 4
  a0:	09 f4       	brne	.+2      	; 0xa4 <__vector_2+0x46>
  a2:	9b c0       	rjmp	.+310    	; 0x1da <__stack+0x7b>
  a4:	45 c1       	rjmp	.+650    	; 0x330 <__stack+0x1d1>
		// handshake initiated
		case StartHandshake:
			if (changed & _BV(SPI_S_CLK)) {
  a6:	34 ff       	sbrs	r19, 4
  a8:	43 c1       	rjmp	.+646    	; 0x330 <__stack+0x1d1>
	// re-enable interrupts
	//	sei();
}

void serviceHandshakeStart(void) {
	if (prev_pin_b & _BV(SPI_S_CLK)) {
  aa:	80 91 68 00 	lds	r24, 0x0068
  ae:	84 fd       	sbrc	r24, 4
  b0:	3f c1       	rjmp	.+638    	; 0x330 <__stack+0x1d1>
		
	} else {
		// LOW to HIGH transition - sample
		
		// if data-in is high, handshake has started
		if (!!(SPI_S_DI_REG & _BV(SPI_S_DI))) {
  b2:	ce 9b       	sbis	0x19, 6	; 25
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__vector_2+0x60>
			hs_started = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 6b 00 	sts	0x006B, r24
  bc:	39 c1       	rjmp	.+626    	; 0x330 <__stack+0x1d1>
		} else {
			// if data-in is low, handshake is completing
			if (hs_started) {
  be:	80 91 6b 00 	lds	r24, 0x006B
  c2:	88 23       	and	r24, r24
  c4:	09 f4       	brne	.+2      	; 0xc8 <__vector_2+0x6a>
  c6:	34 c1       	rjmp	.+616    	; 0x330 <__stack+0x1d1>
				cur_state = EndHandshake;
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	80 93 6c 00 	sts	0x006C, r24
				
				// set slave selects as inputs
				SPI_S_DDR	&= ~_BV(SPI_F_B_DIR);
  ce:	bb 98       	cbi	0x17, 3	; 23
				SPI_S_DDR	&= ~_BV(SPI_F_L_DIR);
  d0:	b9 98       	cbi	0x17, 1	; 23
				
				// SPI pull-up resistors
				SPI_S_PORT	|= _BV(SS_F_BELOW);			// slave select from below
  d2:	c3 9a       	sbi	0x18, 3	; 24
				SPI_S_PORT	|= _BV(SS_F_LEFT);			// slave select from left
  d4:	c1 9a       	sbi	0x18, 1	; 24
				
				// previous port values associated with pull-ups
				prev_pin_b	|= _BV(SS_F_BELOW);			// initialized to high
  d6:	80 91 68 00 	lds	r24, 0x0068
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 93 68 00 	sts	0x0068, r24
				prev_pin_b	|= _BV(SS_F_LEFT);			// "slave select" pulls low
  e0:	80 91 68 00 	lds	r24, 0x0068
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 93 68 00 	sts	0x0068, r24
  ea:	22 c1       	rjmp	.+580    	; 0x330 <__stack+0x1d1>
			}
			break;
			
		// handshake completing
		case EndHandshake:
			if (changed & _BV(SPI_S_CLK)) {
  ec:	34 ff       	sbrs	r19, 4
  ee:	20 c1       	rjmp	.+576    	; 0x330 <__stack+0x1d1>
		}
	}
}

void serviceHandshakeEnd(void) {
	if (prev_pin_b & _BV(SPI_S_CLK)) {
  f0:	80 91 68 00 	lds	r24, 0x0068
  f4:	84 ff       	sbrs	r24, 4
  f6:	28 c0       	rjmp	.+80     	; 0x148 <__vector_2+0xea>
		// HIGH to LOW transition - change state
		
		if (hs_ended) {
  f8:	80 91 6a 00 	lds	r24, 0x006A
  fc:	88 23       	and	r24, r24
  fe:	09 f4       	brne	.+2      	; 0x102 <__vector_2+0xa4>
 100:	17 c1       	rjmp	.+558    	; 0x330 <__stack+0x1d1>
/**
 *	Initializes pins and registers for software SPI-slave implementation
 */
void initSPISlave(void) {
	
	cur_state = SpiSlave;
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	80 93 6c 00 	sts	0x006C, r24
	
	// SPI signal directions
	SPI_S_DDR	 &= ~_BV(SPI_S_CLK_DIR);	// set slave clock as input
 108:	bc 98       	cbi	0x17, 4	; 23
	SPI_S_DI_DDR &= ~_BV(SPI_S_DI_DIR);		// set slave DI as input
 10a:	d6 98       	cbi	0x1a, 6	; 26
	SPI_S_DDR	 &= ~_BV(SPI_F_B_DIR);		// set slave selects as inputs
 10c:	bb 98       	cbi	0x17, 3	; 23
	SPI_S_DDR	 &= ~_BV(SPI_F_L_DIR);
 10e:	b9 98       	cbi	0x17, 1	; 23
	
	// SPI pull-up resistors
	SPI_S_PORT |= _BV(SS_F_BELOW);			// slave select from below
 110:	c3 9a       	sbi	0x18, 3	; 24
	SPI_S_PORT |= _BV(SS_F_LEFT);			// slave select from left
 112:	c1 9a       	sbi	0x18, 1	; 24
	
	// previous port values associated with pull-ups
	prev_pin_b |= _BV(SS_F_BELOW);			// initialized to high
 114:	80 91 68 00 	lds	r24, 0x0068
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 93 68 00 	sts	0x0068, r24
	prev_pin_b |= _BV(SS_F_LEFT);			// "slave select" pulls low
 11e:	80 91 68 00 	lds	r24, 0x0068
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 93 68 00 	sts	0x0068, r24
	
	// enable pin change interrupts (PCI)
	GIMSK	  |= _BV(SPI_S_INT_PORT);		// SPI slave interrupt port
 128:	8b b7       	in	r24, 0x3b	; 59
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	8b bf       	out	0x3b, r24	; 59
	GIMSK	  |= _BV(SPI_CLK_INT_PRT);		// SPI slave clock interrupt port
 12e:	8b b7       	in	r24, 0x3b	; 59
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8b bf       	out	0x3b, r24	; 59
	SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);		// SPI slave clock
 134:	82 b5       	in	r24, 0x22	; 34
 136:	80 61       	ori	r24, 0x10	; 16
 138:	82 bd       	out	0x22, r24	; 34
	SPI_PCMSK |= _BV(SPI_F_B_PCINT);		// slave select from below
 13a:	82 b5       	in	r24, 0x22	; 34
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	82 bd       	out	0x22, r24	; 34
	SPI_PCMSK |= _BV(SPI_F_L_PCINT);		// slave select from left
 140:	82 b5       	in	r24, 0x22	; 34
 142:	82 60       	ori	r24, 0x02	; 2
 144:	82 bd       	out	0x22, r24	; 34
 146:	f4 c0       	rjmp	.+488    	; 0x330 <__stack+0x1d1>
		}
	} else {
		// LOW to HIGH transition - sample
		
		// if data-in is high, handshake has ended
		if (!!(SPI_S_DI_REG & _BV(SPI_S_DI))) {
 148:	ce 9b       	sbis	0x19, 6	; 25
 14a:	f2 c0       	rjmp	.+484    	; 0x330 <__stack+0x1d1>
			hs_ended = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 6a 00 	sts	0x006A, r24
 152:	ee c0       	rjmp	.+476    	; 0x330 <__stack+0x1d1>
	}
}

void serviceSpiSlaveTransmission(uint8_t changedPins) {
	
	if (changedPins & _BV(SS_F_BELOW)) {
 154:	33 ff       	sbrs	r19, 3
 156:	0f c0       	rjmp	.+30     	; 0x176 <__stack+0x17>
		
		// trigger from below
		if (prev_pin_b & _BV(SS_F_BELOW)) {
 158:	80 91 68 00 	lds	r24, 0x0068
 15c:	83 ff       	sbrs	r24, 3
 15e:	07 c0       	rjmp	.+14     	; 0x16e <__stack+0xf>
			// transmission started, remove SS_F_LEFT interrupt
			trig_f_below = 1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 67 00 	sts	0x0067, r24
			SPI_PCMSK &= ~_BV(SPI_F_L_PCINT);
 166:	82 b5       	in	r24, 0x22	; 34
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	82 bd       	out	0x22, r24	; 34
 16c:	e1 c0       	rjmp	.+450    	; 0x330 <__stack+0x1d1>
			}
#endif
			
		} else {
			// end of receive
			rx_completed = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 65 00 	sts	0x0065, r24
 174:	dd c0       	rjmp	.+442    	; 0x330 <__stack+0x1d1>
		}
	} else if (changedPins & _BV(SS_F_LEFT)) {
 176:	31 ff       	sbrs	r19, 1
 178:	0f c0       	rjmp	.+30     	; 0x198 <__stack+0x39>
		
		// trigger from left
		if (prev_pin_b & _BV(SS_F_LEFT)) {
 17a:	80 91 68 00 	lds	r24, 0x0068
 17e:	81 ff       	sbrs	r24, 1
 180:	07 c0       	rjmp	.+14     	; 0x190 <__stack+0x31>
			// transmission started, remove SS_F_BELOW interrupt
			trig_f_left = 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 66 00 	sts	0x0066, r24
			SPI_PCMSK &= ~_BV(SPI_F_B_PCINT);
 188:	82 b5       	in	r24, 0x22	; 34
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	82 bd       	out	0x22, r24	; 34
 18e:	d0 c0       	rjmp	.+416    	; 0x330 <__stack+0x1d1>
			}
#endif
			
		} else {
			// end of receive
			rx_completed = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 65 00 	sts	0x0065, r24
 196:	cc c0       	rjmp	.+408    	; 0x330 <__stack+0x1d1>
		}
	} else if (changedPins & _BV(SPI_S_CLK)) {
 198:	34 ff       	sbrs	r19, 4
 19a:	ca c0       	rjmp	.+404    	; 0x330 <__stack+0x1d1>
		
		// SPI mode 0: CPOL = 0, CPHA = 0
		if (prev_pin_b & _BV(SPI_S_CLK)) {
 19c:	20 91 68 00 	lds	r18, 0x0068
 1a0:	24 fd       	sbrc	r18, 4
 1a2:	c6 c0       	rjmp	.+396    	; 0x330 <__stack+0x1d1>
			}
#endif
			
		} else {
			// LOW to HIGH - sample
			if (s_data_in_pos--) {
 1a4:	20 91 61 00 	lds	r18, 0x0061
 1a8:	3f ef       	ldi	r19, 0xFF	; 255
 1aa:	32 0f       	add	r19, r18
 1ac:	30 93 61 00 	sts	0x0061, r19
 1b0:	22 23       	and	r18, r18
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <__stack+0x57>
 1b4:	bd c0       	rjmp	.+378    	; 0x330 <__stack+0x1d1>
				spi_s_data_in |= (!!(SPI_S_DI_REG & _BV(SPI_S_DI)) << s_data_in_pos);
 1b6:	49 b3       	in	r20, 0x19	; 25
 1b8:	30 91 61 00 	lds	r19, 0x0061
 1bc:	20 91 69 00 	lds	r18, 0x0069
 1c0:	46 fb       	bst	r20, 6
 1c2:	88 27       	eor	r24, r24
 1c4:	80 f9       	bld	r24, 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__stack+0x6f>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	3a 95       	dec	r19
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <__stack+0x6b>
 1d2:	82 2b       	or	r24, r18
 1d4:	80 93 69 00 	sts	0x0069, r24
 1d8:	ab c0       	rjmp	.+342    	; 0x330 <__stack+0x1d1>
void serviceMasterHandshake(uint8_t changedPins) {
	
	uint8_t from_above = 0;
	uint8_t from_right = 0;
	
	if (changedPins & _BV(SS_T_ABOVE)) {
 1da:	36 ff       	sbrs	r19, 6
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <__stack+0x93>
		if (prev_pin_b & _BV(SS_T_ABOVE)) {
 1de:	90 91 68 00 	lds	r25, 0x0068
 1e2:	96 fb       	bst	r25, 6
 1e4:	99 27       	eor	r25, r25
 1e6:	90 f9       	bld	r25, 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 27       	eor	r24, r25
		}
		
	}
	
	// start handshake
	if (from_above || from_right) {
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <__stack+0x91>
 1ee:	a0 c0       	rjmp	.+320    	; 0x330 <__stack+0x1d1>
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__stack+0xa1>
		} else {
			// LOW to HIGH - start handshake
			
			from_above = 1;
		}
	} else if (changedPins & _BV(SS_T_RIGHT)) {
 1f2:	35 ff       	sbrs	r19, 5
 1f4:	9d c0       	rjmp	.+314    	; 0x330 <__stack+0x1d1>
		if (prev_pin_b & _BV(SS_T_RIGHT)) {
 1f6:	80 91 68 00 	lds	r24, 0x0068
		}
		
	}
	
	// start handshake
	if (from_above || from_right) {
 1fa:	85 fd       	sbrc	r24, 5
 1fc:	99 c0       	rjmp	.+306    	; 0x330 <__stack+0x1d1>
	}
}

void serviceMasterHandshake(uint8_t changedPins) {
	
	uint8_t from_above = 0;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// start handshake
	if (from_above || from_right) {
		
		SPI_M_DO_REG |= _BV(SPI_M_DO);
 200:	df 9a       	sbi	0x1b, 7	; 27
		SPI_M_DO_REG |= _BV(SPI_M_CLK);
 202:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	e3 ef       	ldi	r30, 0xF3	; 243
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__stack+0xa9>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <__stack+0xaf>
 20e:	00 00       	nop
		_delay_ms(m_clk_ms);
		SPI_M_DO_REG &= ~_BV(SPI_M_CLK);
 210:	db 98       	cbi	0x1b, 3	; 27
		SPI_M_DO_REG &= ~_BV(SPI_M_DO);
 212:	df 98       	cbi	0x1b, 7	; 27
 214:	e3 ef       	ldi	r30, 0xF3	; 243
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <__stack+0xb9>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <__stack+0xbf>
 21e:	00 00       	nop
		_delay_ms(m_clk_ms);
		
		SPI_M_DO_REG |= _BV(SPI_M_CLK);
 220:	db 9a       	sbi	0x1b, 3	; 27
 222:	e3 ef       	ldi	r30, 0xF3	; 243
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <__stack+0xc7>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <__stack+0xcd>
 22c:	00 00       	nop
		_delay_ms(m_clk_ms);
		SPI_M_DO_REG &= ~_BV(SPI_M_CLK);
 22e:	db 98       	cbi	0x1b, 3	; 27
 230:	e3 ef       	ldi	r30, 0xF3	; 243
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <__stack+0xd5>
 238:	00 c0       	rjmp	.+0      	; 0x23a <__stack+0xdb>
 23a:	00 00       	nop
		_delay_ms(m_clk_ms);
		
		SPI_M_DO_REG |= _BV(SPI_M_DO);
 23c:	df 9a       	sbi	0x1b, 7	; 27
		SPI_M_DO_REG |= _BV(SPI_M_CLK);
 23e:	db 9a       	sbi	0x1b, 3	; 27
		
		// set corresponding slave select as output
		uint8_t slave = _BV((from_above) ? (SPI_T_A_DIR) : (SPI_T_R_DIR));
 240:	88 23       	and	r24, r24
 242:	11 f0       	breq	.+4      	; 0x248 <__stack+0xe9>
 244:	40 e4       	ldi	r20, 0x40	; 64
 246:	01 c0       	rjmp	.+2      	; 0x24a <__stack+0xeb>
 248:	40 e2       	ldi	r20, 0x20	; 32
		SPI_M_DDR	 |= slave;
 24a:	87 b3       	in	r24, 0x17	; 23
 24c:	84 2b       	or	r24, r20
 24e:	87 bb       	out	0x17, r24	; 23
		
		// pull HIGH to prepare for tx
		SPI_M_PORT	 |= slave;
 250:	88 b3       	in	r24, 0x18	; 24
 252:	84 2b       	or	r24, r20
 254:	88 bb       	out	0x18, r24	; 24
 256:	83 ef       	ldi	r24, 0xF3	; 243
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <__stack+0xfb>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <__stack+0x101>
 260:	00 00       	nop
		_delay_ms(m_clk_ms);
		
		SPI_M_DO_REG  &= ~_BV(SPI_M_CLK);
 262:	db 98       	cbi	0x1b, 3	; 27
		SPI_M_DO_REG &= ~_BV(SPI_M_DO);
 264:	df 98       	cbi	0x1b, 7	; 27
 266:	e3 ef       	ldi	r30, 0xF3	; 243
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <__stack+0x10b>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <__stack+0x111>
 270:	00 00       	nop
void sendVector(uint8_t newBlockDirection) {
	
	//	cur_state = SpiMaster;
	
	
	TOGGLE_STATUS;
 272:	9b b3       	in	r25, 0x1b	; 27
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	89 27       	eor	r24, r25
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	83 ef       	ldi	r24, 0xF3	; 243
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <__stack+0x11f>
 282:	00 c0       	rjmp	.+0      	; 0x284 <__stack+0x125>
 284:	00 00       	nop
	_delay_ms(m_clk_ms);
	TOGGLE_STATUS;
 286:	9b b3       	in	r25, 0x1b	; 27
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 27       	eor	r24, r25
 28c:	8b bb       	out	0x1b, r24	; 27
 28e:	e3 ef       	ldi	r30, 0xF3	; 243
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <__stack+0x133>
 296:	00 c0       	rjmp	.+0      	; 0x298 <__stack+0x139>
 298:	00 00       	nop
	_delay_ms(m_clk_ms);
	TOGGLE_STATUS;
 29a:	9b b3       	in	r25, 0x1b	; 27
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	89 27       	eor	r24, r25
 2a0:	8b bb       	out	0x1b, r24	; 27
 2a2:	83 ef       	ldi	r24, 0xF3	; 243
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <__stack+0x147>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <__stack+0x14d>
 2ac:	00 00       	nop
	_delay_ms(m_clk_ms);
	TOGGLE_STATUS;
 2ae:	9b b3       	in	r25, 0x1b	; 27
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	89 27       	eor	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	e3 ef       	ldi	r30, 0xF3	; 243
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <__stack+0x15b>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <__stack+0x161>
 2c0:	00 00       	nop
	_delay_ms(m_clk_ms);
	
	
	// pull slave select LOW to signal tx start
	SPI_M_PORT &= ~newBlockDirection;
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	94 2f       	mov	r25, r20
 2c6:	90 95       	com	r25
 2c8:	89 23       	and	r24, r25
 2ca:	88 bb       	out	0x18, r24	; 24
	
	// put bits on data out line
	while (m_data_out_pos--) {
 2cc:	80 91 60 00 	lds	r24, 0x0060
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	98 0f       	add	r25, r24
 2d4:	90 93 60 00 	sts	0x0060, r25
 2d8:	88 23       	and	r24, r24
 2da:	21 f1       	breq	.+72     	; 0x324 <__stack+0x1c5>
		SPI_M_DO_REG = (SPI_M_DO_REG & ~_BV(SPI_M_DO)) | (((i2c_addr >> m_data_out_pos) & 0b00000001) << SPI_M_DO);
 2dc:	2b b3       	in	r18, 0x1b	; 27
 2de:	80 91 64 00 	lds	r24, 0x0064
 2e2:	30 91 60 00 	lds	r19, 0x0060
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__stack+0x18f>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	3a 95       	dec	r19
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <__stack+0x18b>
 2f2:	80 fb       	bst	r24, 0
 2f4:	27 f9       	bld	r18, 7
 2f6:	2b bb       	out	0x1b, r18	; 27
		
		// pulse clock
		SPI_M_DO_REG |= _BV(SPI_M_CLK);
 2f8:	db 9a       	sbi	0x1b, 3	; 27
 2fa:	83 ef       	ldi	r24, 0xF3	; 243
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <__stack+0x19f>
 302:	00 c0       	rjmp	.+0      	; 0x304 <__stack+0x1a5>
 304:	00 00       	nop
		_delay_ms(m_clk_ms);
		SPI_M_DO_REG &= ~_BV(SPI_M_CLK);
 306:	db 98       	cbi	0x1b, 3	; 27
 308:	e3 ef       	ldi	r30, 0xF3	; 243
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <__stack+0x1ad>
 310:	00 c0       	rjmp	.+0      	; 0x312 <__stack+0x1b3>
 312:	00 00       	nop
	
	// pull slave select LOW to signal tx start
	SPI_M_PORT &= ~newBlockDirection;
	
	// put bits on data out line
	while (m_data_out_pos--) {
 314:	80 91 60 00 	lds	r24, 0x0060
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	98 0f       	add	r25, r24
 31c:	90 93 60 00 	sts	0x0060, r25
 320:	81 11       	cpse	r24, r1
 322:	dc cf       	rjmp	.-72     	; 0x2dc <__stack+0x17d>
		SPI_M_DO_REG &= ~_BV(SPI_M_CLK);
		_delay_ms(m_clk_ms);
	}
	
	// reset position
	m_data_out_pos = 8;
 324:	88 e0       	ldi	r24, 0x08	; 8
 326:	80 93 60 00 	sts	0x0060, r24
	
	// pull HIGH to signal end of tx
	SPI_M_PORT |= newBlockDirection;
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	48 2b       	or	r20, r24
 32e:	48 bb       	out	0x18, r20	; 24
		default:
			break;
	}
	
	// set i2c address if vector byte received
	if (rx_completed) {
 330:	80 91 65 00 	lds	r24, 0x0065
 334:	88 23       	and	r24, r24
 336:	09 f4       	brne	.+2      	; 0x33a <__stack+0x1db>
 338:	41 c0       	rjmp	.+130    	; 0x3bc <__stack+0x25d>
		// reset positions
#ifdef SPI_S_DO
		s_data_out_pos = 8;
#endif
		
		s_data_in_pos = 8;
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	80 93 61 00 	sts	0x0061, r24
		
		// assign address from transmitted byte (vector)
		// position structure: bits [2:0] are x-coord, [6:3] are y-coord
		// set x-coord [2:0], increment if triggered from the left
		i2c_addr |= (spi_s_data_in & 0b00000111) + (trig_f_left);
 340:	80 91 69 00 	lds	r24, 0x0069
 344:	20 91 66 00 	lds	r18, 0x0066
 348:	90 91 64 00 	lds	r25, 0x0064
 34c:	87 70       	andi	r24, 0x07	; 7
 34e:	82 0f       	add	r24, r18
 350:	89 2b       	or	r24, r25
 352:	80 93 64 00 	sts	0x0064, r24
		
		// set y-coord [6:3], increment if triggered from below
		i2c_addr |= (spi_s_data_in & 0b01111000) + (trig_f_below << 3);
 356:	80 91 69 00 	lds	r24, 0x0069
 35a:	20 91 67 00 	lds	r18, 0x0067
 35e:	90 91 64 00 	lds	r25, 0x0064
 362:	22 0f       	add	r18, r18
 364:	22 0f       	add	r18, r18
 366:	22 0f       	add	r18, r18
 368:	88 77       	andi	r24, 0x78	; 120
 36a:	82 0f       	add	r24, r18
 36c:	89 2b       	or	r24, r25
 36e:	80 93 64 00 	sts	0x0064, r24
	//	spi_s_data_in = 0;
	//	i2c_addr = 0;
	//	rx_completed = 0;
	#endif
	#ifdef MCU_461
	PORTA &= 0b11001001;
 372:	8b b3       	in	r24, 0x1b	; 27
 374:	89 7c       	andi	r24, 0xC9	; 201
 376:	8b bb       	out	0x1b, r24	; 27
	PORTA |= ((i2c_addr << 1) & 0b00000110);
 378:	9b b3       	in	r25, 0x1b	; 27
 37a:	80 91 64 00 	lds	r24, 0x0064
 37e:	88 0f       	add	r24, r24
 380:	86 70       	andi	r24, 0x06	; 6
 382:	89 2b       	or	r24, r25
 384:	8b bb       	out	0x1b, r24	; 27
	PORTA |= ((i2c_addr << 1) & 0b00110000);
 386:	9b b3       	in	r25, 0x1b	; 27
 388:	80 91 64 00 	lds	r24, 0x0064
 38c:	88 0f       	add	r24, r24
 38e:	80 73       	andi	r24, 0x30	; 48
 390:	89 2b       	or	r24, r25
 392:	8b bb       	out	0x1b, r24	; 27
		
		// set y-coord [6:3], increment if triggered from below
		i2c_addr |= (spi_s_data_in & 0b01111000) + (trig_f_below << 3);
		
		showAddress();
		setup_i2c(i2c_addr);
 394:	80 91 64 00 	lds	r24, 0x0064
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ff d0       	rcall	.+510    	; 0x59a <setup_i2c>
void initSPIMaster(void) {
	
	// disable interrupts for setup
	//	cli();
	
	cur_state = SpiMasterHandshake;
 39c:	84 e0       	ldi	r24, 0x04	; 4
 39e:	80 93 6c 00 	sts	0x006C, r24
	
	// SPI master signal directions
	SPI_M_DO_DDR |= _BV(SPI_M_CLK_DIR);		// set master clock as output
 3a2:	d7 9a       	sbi	0x1a, 7	; 26
	SPI_M_DO_DDR |= _BV(SPI_M_DO_DIR);		// set master DO as output
 3a4:	d7 9a       	sbi	0x1a, 7	; 26
	
	// set slave-selects temporarily as inputs to "listen"
	// for new block presence
	SPI_M_DDR	 &= ~_BV(SPI_T_A_DIR);
 3a6:	be 98       	cbi	0x17, 6	; 23
	SPI_M_DDR	 &= ~_BV(SPI_T_R_DIR);
 3a8:	bd 98       	cbi	0x17, 5	; 23
	
	// enable pin change interrupts (PCI)
	GIMSK		 |= _BV(SPI_M_INT_PORT);	// SPI interrupt port
 3aa:	8b b7       	in	r24, 0x3b	; 59
 3ac:	80 62       	ori	r24, 0x20	; 32
 3ae:	8b bf       	out	0x3b, r24	; 59
	SPI_PCMSK	 |= _BV(SPI_T_A_PCINT);		// SPI slave select to-right intrpt
 3b0:	82 b5       	in	r24, 0x22	; 34
 3b2:	80 64       	ori	r24, 0x40	; 64
 3b4:	82 bd       	out	0x22, r24	; 34
	SPI_PCMSK	 |= _BV(SPI_T_R_PCINT);		// SPI slave select to-above intrpt
 3b6:	82 b5       	in	r24, 0x22	; 34
 3b8:	80 62       	ori	r24, 0x20	; 32
 3ba:	82 bd       	out	0x22, r24	; 34
//		GIMSK &= ~_BV(PCIE);			// PORTB
//		return;
	}
	
	// update history
	prev_pin_b = SPI_S_PIN_REG;
 3bc:	86 b3       	in	r24, 0x16	; 22
 3be:	80 93 68 00 	sts	0x0068, r24
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <WDT_off>:

void WDT_off(void) //disable watchdog timer may be 461 specific
{
	//_WDR(); //atmel docs
	/* Clear WDRF in MCUSR */
	MCUSR = 0x00;
 3e4:	14 be       	out	0x34, r1	; 52
	/* Write logical one to WDCE and WDE */
	WDTCR |= (1<<WDCE) | (1<<WDE);
 3e6:	81 b5       	in	r24, 0x21	; 33
 3e8:	88 61       	ori	r24, 0x18	; 24
 3ea:	81 bd       	out	0x21, r24	; 33
	/* Turn off WDT */
	WDTCR = 0x00;
 3ec:	11 bc       	out	0x21, r1	; 33
 3ee:	08 95       	ret

000003f0 <main>:
}

int main(void) {
 3f0:	cf 93       	push	r28
	
	WDT_off(); 
 3f2:	f8 df       	rcall	.-16     	; 0x3e4 <WDT_off>
	DDRA |= _BV(PD3);
	DDRA |= _BV(STATUS_LED);
	DDRA |= _BV(ERROR_LED);
	#endif
	#ifdef MCU_461
	DDRA |= _BV(PA1);
 3f4:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= _BV(PA2);
 3f6:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA |= _BV(PA4);
 3f8:	d4 9a       	sbi	0x1a, 4	; 26
	DDRA |= _BV(PA5);
 3fa:	d5 9a       	sbi	0x1a, 5	; 26
	DDRA |= _BV(STATUS_LED);
 3fc:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA |= _BV(ERROR_LED);
 3fe:	d3 9a       	sbi	0x1a, 3	; 26
		_delay_ms(25);
		PORTD &= ~_BV(PD0 + i);
	}
	#endif
	#ifdef MCU_461
	PORTA |= _BV(PA1);
 400:	d9 9a       	sbi	0x1b, 1	; 27
 402:	89 e6       	ldi	r24, 0x69	; 105
 404:	98 e1       	ldi	r25, 0x18	; 24
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <main+0x16>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <main+0x1c>
 40c:	00 00       	nop
	_delay_ms(25);
	PORTA |= _BV(PA2);
 40e:	da 9a       	sbi	0x1b, 2	; 27
 410:	e9 e6       	ldi	r30, 0x69	; 105
 412:	f8 e1       	ldi	r31, 0x18	; 24
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <main+0x24>
 418:	00 c0       	rjmp	.+0      	; 0x41a <main+0x2a>
 41a:	00 00       	nop
	_delay_ms(25);
	PORTA |= _BV(PA4);
 41c:	dc 9a       	sbi	0x1b, 4	; 27
 41e:	89 e6       	ldi	r24, 0x69	; 105
 420:	98 e1       	ldi	r25, 0x18	; 24
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <main+0x32>
 426:	00 c0       	rjmp	.+0      	; 0x428 <main+0x38>
 428:	00 00       	nop
	_delay_ms(25);
	PORTA |= _BV(PA5);
 42a:	dd 9a       	sbi	0x1b, 5	; 27
 42c:	e9 e6       	ldi	r30, 0x69	; 105
 42e:	f8 e1       	ldi	r31, 0x18	; 24
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <main+0x40>
 434:	00 c0       	rjmp	.+0      	; 0x436 <main+0x46>
 436:	00 00       	nop
	_delay_ms(25);
	PORTA &= ~_BV(PA1);
 438:	d9 98       	cbi	0x1b, 1	; 27
 43a:	89 e6       	ldi	r24, 0x69	; 105
 43c:	98 e1       	ldi	r25, 0x18	; 24
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <main+0x4e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <main+0x54>
 444:	00 00       	nop
	_delay_ms(25);
	PORTA &= ~_BV(PA2);
 446:	da 98       	cbi	0x1b, 2	; 27
 448:	e9 e6       	ldi	r30, 0x69	; 105
 44a:	f8 e1       	ldi	r31, 0x18	; 24
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <main+0x5c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <main+0x62>
 452:	00 00       	nop
	_delay_ms(25);
	PORTA &= ~_BV(PA4);
 454:	dc 98       	cbi	0x1b, 4	; 27
 456:	89 e6       	ldi	r24, 0x69	; 105
 458:	98 e1       	ldi	r25, 0x18	; 24
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <main+0x6a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <main+0x70>
 460:	00 00       	nop
	_delay_ms(25);
	PORTA &= ~_BV(PA5);
 462:	dd 98       	cbi	0x1b, 5	; 27
 464:	e9 e6       	ldi	r30, 0x69	; 105
 466:	f8 e1       	ldi	r31, 0x18	; 24
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <main+0x78>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <main+0x7e>
 46e:	00 00       	nop
/**
 *	Initializes pins and registers for handshake protocol
 */
void initHandshake(void) {
	
	cur_state = StartHandshake;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 6c 00 	sts	0x006C, r24

	// SPI signal directions
	SPI_S_DDR	 &= ~_BV(SPI_S_CLK_DIR);	// set slave clock as input
 476:	bc 98       	cbi	0x17, 4	; 23
	SPI_S_DI_DDR &= ~_BV(SPI_S_DI_DIR);		// set slave DI as input
 478:	d6 98       	cbi	0x1a, 6	; 26
	
	// set slave selects temporarily as outputs to "announce" new block presence
	SPI_S_DDR	 |= _BV(SPI_F_B_DIR);
 47a:	bb 9a       	sbi	0x17, 3	; 23
	SPI_S_DDR	 |= _BV(SPI_F_L_DIR);
 47c:	b9 9a       	sbi	0x17, 1	; 23
	
	// start slave selects low
	SPI_S_PORT	 &= ~_BV(SS_F_BELOW);
 47e:	c3 98       	cbi	0x18, 3	; 24
	SPI_S_PORT	 &= ~_BV(SS_F_LEFT);
 480:	c1 98       	cbi	0x18, 1	; 24
	
	// enable pin change interrupts (PCI)
	GIMSK		 |= _BV(SPI_S_INT_PORT);	// SPI slave interrupt port
 482:	8b b7       	in	r24, 0x3b	; 59
 484:	80 61       	ori	r24, 0x10	; 16
 486:	8b bf       	out	0x3b, r24	; 59
	GIMSK		 |= _BV(SPI_CLK_INT_PRT);	// SPI slave clock interrupt port
 488:	8b b7       	in	r24, 0x3b	; 59
 48a:	80 62       	ori	r24, 0x20	; 32
 48c:	8b bf       	out	0x3b, r24	; 59
	SPI_PCMSK	 |= _BV(SPI_S_CLK_PCINT);	// SPI slave clock
 48e:	82 b5       	in	r24, 0x22	; 34
 490:	80 61       	ori	r24, 0x10	; 16
 492:	82 bd       	out	0x22, r24	; 34
	
	sei();									// enable interrupts
 494:	78 94       	sei

void waitForCompletedHandshake(void) {
	uint8_t left = 1;
	
	// bring SS_F_LEFT or SS_F_BELOW to HIGH
	SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 496:	c1 9a       	sbi	0x18, 1	; 24
 498:	89 e6       	ldi	r24, 0x69	; 105
 49a:	98 e1       	ldi	r25, 0x18	; 24
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <main+0xac>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0xb2>
 4a2:	00 00       	nop
	
	// master processor may be busy
	_delay_ms(25);
	
	// spin until handshake has been recognized
	while (cur_state == StartHandshake && !hs_started) {
 4a4:	80 91 6c 00 	lds	r24, 0x006C
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	19 f5       	brne	.+70     	; 0x4f2 <main+0x102>
 4ac:	80 91 6b 00 	lds	r24, 0x006B
 4b0:	81 11       	cpse	r24, r1
 4b2:	1f c0       	rjmp	.+62     	; 0x4f2 <main+0x102>
	_delay_ms(25);
	#endif
}

void waitForCompletedHandshake(void) {
	uint8_t left = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
		
		// re-eneable clock pin change interrupt
		SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);
		
		// toggle to other input select
		left = !left;
 4b6:	61 e0       	ldi	r22, 0x01	; 1
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 4b8:	52 e0       	ldi	r21, 0x02	; 2
		
		// re-eneable clock pin change interrupt
		SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);
		
		// toggle to other input select
		left = !left;
 4ba:	40 e0       	ldi	r20, 0x00	; 0
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 4bc:	38 e0       	ldi	r19, 0x08	; 8
	
	// spin until handshake has been recognized
	while (cur_state == StartHandshake && !hs_started) {

		// disable clock pin change interrupt
		SPI_PCMSK &= ~_BV(SPI_S_CLK_PCINT);
 4be:	92 b5       	in	r25, 0x22	; 34
 4c0:	9f 7e       	andi	r25, 0xEF	; 239
 4c2:	92 bd       	out	0x22, r25	; 34
		
		// bring SS_F_LEFT or SS_F_BELOW back down LOW
		SPI_S_PORT &= ~_BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 4c4:	98 b3       	in	r25, 0x18	; 24
 4c6:	81 11       	cpse	r24, r1
 4c8:	20 c0       	rjmp	.+64     	; 0x50a <main+0x11a>
 4ca:	2e c0       	rjmp	.+92     	; 0x528 <main+0x138>
		
		// toggle to other input select
		left = !left;
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 4cc:	92 2b       	or	r25, r18
 4ce:	98 bb       	out	0x18, r25	; 24
 4d0:	e9 e6       	ldi	r30, 0x69	; 105
 4d2:	f8 e1       	ldi	r31, 0x18	; 24
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0xe4>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <main+0xea>
 4da:	00 00       	nop
		
		// master processor may be busy
		_delay_ms(25);
		
		TOGGLE_ERROR;
 4dc:	9b b3       	in	r25, 0x1b	; 27
 4de:	93 27       	eor	r25, r19
 4e0:	9b bb       	out	0x1b, r25	; 27
	
	// master processor may be busy
	_delay_ms(25);
	
	// spin until handshake has been recognized
	while (cur_state == StartHandshake && !hs_started) {
 4e2:	90 91 6c 00 	lds	r25, 0x006C
 4e6:	91 30       	cpi	r25, 0x01	; 1
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <main+0x102>
 4ea:	90 91 6b 00 	lds	r25, 0x006B
 4ee:	99 23       	and	r25, r25
 4f0:	31 f3       	breq	.-52     	; 0x4be <main+0xce>
	startupSequence();

	initHandshake();
	waitForCompletedHandshake();

	PORTA &= 0b11000000;
 4f2:	8b b3       	in	r24, 0x1b	; 27
 4f4:	80 7c       	andi	r24, 0xC0	; 192
 4f6:	8b bb       	out	0x1b, r24	; 27
	
	while (loop_i2c()) {
		TOGGLE_STATUS;
 4f8:	c1 e0       	ldi	r28, 0x01	; 1
	initHandshake();
	waitForCompletedHandshake();

	PORTA &= 0b11000000;
	
	while (loop_i2c()) {
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <main+0x112>
		TOGGLE_STATUS;
 4fc:	8b b3       	in	r24, 0x1b	; 27
 4fe:	8c 27       	eor	r24, r28
 500:	8b bb       	out	0x1b, r24	; 27
	initHandshake();
	waitForCompletedHandshake();

	PORTA &= 0b11000000;
	
	while (loop_i2c()) {
 502:	59 d0       	rcall	.+178    	; 0x5b6 <loop_i2c>
 504:	89 2b       	or	r24, r25
 506:	d1 f7       	brne	.-12     	; 0x4fc <main+0x10c>
 508:	1e c0       	rjmp	.+60     	; 0x546 <main+0x156>

		// disable clock pin change interrupt
		SPI_PCMSK &= ~_BV(SPI_S_CLK_PCINT);
		
		// bring SS_F_LEFT or SS_F_BELOW back down LOW
		SPI_S_PORT &= ~_BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 50a:	9d 7f       	andi	r25, 0xFD	; 253
 50c:	98 bb       	out	0x18, r25	; 24
 50e:	e9 e6       	ldi	r30, 0x69	; 105
 510:	f8 e1       	ldi	r31, 0x18	; 24
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <main+0x122>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x128>
 518:	00 00       	nop
		
		// give more time to finish
		_delay_ms(25);
		
		// re-eneable clock pin change interrupt
		SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);
 51a:	82 b5       	in	r24, 0x22	; 34
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	82 bd       	out	0x22, r24	; 34
		
		// toggle to other input select
		left = !left;
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 520:	28 b3       	in	r18, 0x18	; 24
		
		// re-eneable clock pin change interrupt
		SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);
		
		// toggle to other input select
		left = !left;
 522:	84 2f       	mov	r24, r20
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 524:	93 2f       	mov	r25, r19
 526:	d2 cf       	rjmp	.-92     	; 0x4cc <main+0xdc>

		// disable clock pin change interrupt
		SPI_PCMSK &= ~_BV(SPI_S_CLK_PCINT);
		
		// bring SS_F_LEFT or SS_F_BELOW back down LOW
		SPI_S_PORT &= ~_BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 528:	97 7f       	andi	r25, 0xF7	; 247
 52a:	98 bb       	out	0x18, r25	; 24
 52c:	89 e6       	ldi	r24, 0x69	; 105
 52e:	98 e1       	ldi	r25, 0x18	; 24
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <main+0x140>
 534:	00 c0       	rjmp	.+0      	; 0x536 <main+0x146>
 536:	00 00       	nop
		
		// give more time to finish
		_delay_ms(25);
		
		// re-eneable clock pin change interrupt
		SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);
 538:	82 b5       	in	r24, 0x22	; 34
 53a:	80 61       	ori	r24, 0x10	; 16
 53c:	82 bd       	out	0x22, r24	; 34
		
		// toggle to other input select
		left = !left;
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 53e:	28 b3       	in	r18, 0x18	; 24
		
		// re-eneable clock pin change interrupt
		SPI_PCMSK |= _BV(SPI_S_CLK_PCINT);
		
		// toggle to other input select
		left = !left;
 540:	86 2f       	mov	r24, r22
		
		// bring SS_F_LEFT or SS_F_BELOW to HIGH
		SPI_S_PORT |= _BV((left) ? (SS_F_LEFT) : (SS_F_BELOW));
 542:	95 2f       	mov	r25, r21
 544:	c3 cf       	rjmp	.-122    	; 0x4cc <main+0xdc>
 546:	87 e8       	ldi	r24, 0x87	; 135
 548:	93 e1       	ldi	r25, 0x13	; 19
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <main+0x15a>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <main+0x160>
 550:	00 00       	nop
	while (loop_i2c()) {
		TOGGLE_STATUS;
	}
	_delay_ms(20);
	return 0; // never reached
}
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <requestEvent_i2c>:
	WDTCR = 0x08;
}

void requestEvent_i2c()  //this runs when a read is detected for address
{  
  switch (State_i2c)
 55a:	80 91 99 00 	lds	r24, 0x0099
  {
  case 0: //reading the function, default
  default:
	Demo_Function_Select();
    usiTwiTransmitByte(Block_Function);
 55e:	80 91 62 00 	lds	r24, 0x0062
 562:	63 d0       	rcall	.+198    	; 0x62a <usiTwiTransmitByte>
 564:	08 95       	ret

00000566 <receiveEvent_i2c>:
  }
}

void receiveEvent_i2c(uint8_t HowMany) //this runs when a write is detected for address 
{                                  //flow is slave_write then state_# then value. 3 bytes to changes omething
    switch (State_i2c)
 566:	80 91 99 00 	lds	r24, 0x0099
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	39 f0       	breq	.+14     	; 0x57c <receiveEvent_i2c+0x16>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	19 f0       	breq	.+6      	; 0x578 <receiveEvent_i2c+0x12>
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	71 f4       	brne	.+28     	; 0x592 <receiveEvent_i2c+0x2c>
 576:	07 c0       	rjmp	.+14     	; 0x586 <receiveEvent_i2c+0x20>
    {
	  case 3: //reset
		
		usiTwiReceiveByte(); //trash 3rd byte
 578:	68 d0       	rcall	.+208    	; 0x64a <usiTwiReceiveByte>
		break;
 57a:	08 95       	ret
      case 2: //changing slave address
        usiTwiSlaveInit(usiTwiReceiveByte());
 57c:	66 d0       	rcall	.+204    	; 0x64a <usiTwiReceiveByte>
 57e:	40 d0       	rcall	.+128    	; 0x600 <usiTwiSlaveInit>
        State_i2c = 0;
 580:	10 92 99 00 	sts	0x0099, r1
        break;
 584:	08 95       	ret
      case 1: //setting a new function
        Block_Function = usiTwiReceiveByte();
 586:	61 d0       	rcall	.+194    	; 0x64a <usiTwiReceiveByte>
 588:	80 93 62 00 	sts	0x0062, r24
        State_i2c = 0;
 58c:	10 92 99 00 	sts	0x0099, r1
        break;
 590:	08 95       	ret
      case 0: //setting a new state, default
      default:       
        State_i2c = usiTwiReceiveByte();
 592:	5b d0       	rcall	.+182    	; 0x64a <usiTwiReceiveByte>
 594:	80 93 99 00 	sts	0x0099, r24
 598:	08 95       	ret

0000059a <setup_i2c>:
    }
}

void I2C_setup(uint8_t slave_add)
{
     usiTwiSlaveInit(slave_add);
 59a:	32 d0       	rcall	.+100    	; 0x600 <usiTwiSlaveInit>


void setup_i2c(uint8_t slave_add) 
{
     I2C_setup(slave_add);
     usi_onReceiverPtr = receiveEvent_i2c;
 59c:	83 eb       	ldi	r24, 0xB3	; 179
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	90 93 96 00 	sts	0x0096, r25
 5a4:	80 93 95 00 	sts	0x0095, r24
     usi_onRequestPtr = requestEvent_i2c;
 5a8:	8d ea       	ldi	r24, 0xAD	; 173
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	90 93 94 00 	sts	0x0094, r25
 5b0:	80 93 93 00 	sts	0x0093, r24
 5b4:	08 95       	ret

000005b6 <loop_i2c>:

}

int loop_i2c() 
{
	if(State_i2c==3)
 5b6:	80 91 99 00 	lds	r24, 0x0099
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <loop_i2c+0x12>
	{
		State_i2c = 0;
 5be:	10 92 99 00 	sts	0x0099, r1
		return(false);
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	08 95       	ret
	}
    {
		if (!usi_onReceiverPtr)
 5c8:	80 91 95 00 	lds	r24, 0x0095
 5cc:	90 91 96 00 	lds	r25, 0x0096
 5d0:	89 2b       	or	r24, r25
 5d2:	69 f0       	breq	.+26     	; 0x5ee <loop_i2c+0x38>
		{
			// no onReceive callback, nothing to do...
			return(true);
		}
		if (!(USISR & ( 1 << USIPF )))
 5d4:	75 9b       	sbis	0x0e, 5	; 14
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <loop_i2c+0x3e>
		{
			// Stop not detected
			return(true);
		}
		uint8_t amount = usiTwiAmountDataInReceiveBuffer();
 5d8:	54 d0       	rcall	.+168    	; 0x682 <usiTwiAmountDataInReceiveBuffer>
		if (amount == 0)
 5da:	88 23       	and	r24, r24
 5dc:	71 f0       	breq	.+28     	; 0x5fa <loop_i2c+0x44>
		{
			// no data in buffer
			return(true);
		}
		usi_onReceiverPtr(amount);
 5de:	e0 91 95 00 	lds	r30, 0x0095
 5e2:	f0 91 96 00 	lds	r31, 0x0096
 5e6:	09 95       	icall
		return(true);
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	08 95       	ret
	}
    {
		if (!usi_onReceiverPtr)
		{
			// no onReceive callback, nothing to do...
			return(true);
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	08 95       	ret
		}
		if (!(USISR & ( 1 << USIPF )))
		{
			// Stop not detected
			return(true);
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	08 95       	ret
		}
		uint8_t amount = usiTwiAmountDataInReceiveBuffer();
		if (amount == 0)
		{
			// no data in buffer
			return(true);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
		}
		usi_onReceiverPtr(amount);
		return(true);
	}
 5fe:	08 95       	ret

00000600 <usiTwiSlaveInit>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 600:	10 92 7f 00 	sts	0x007F, r1
  rxHead = 0;
 604:	10 92 80 00 	sts	0x0080, r1
  txTail = 0;
 608:	10 92 6d 00 	sts	0x006D, r1
  txHead = 0;
 60c:	10 92 6e 00 	sts	0x006E, r1
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
 610:	80 93 92 00 	sts	0x0092, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 614:	87 b3       	in	r24, 0x17	; 23
 616:	85 60       	ori	r24, 0x05	; 5
 618:	87 bb       	out	0x17, r24	; 23
 
  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 61a:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 61c:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 61e:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 620:	88 ea       	ldi	r24, 0xA8	; 168
 622:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 624:	80 ef       	ldi	r24, 0xF0	; 240
 626:	8e b9       	out	0x0e, r24	; 14
 628:	08 95       	ret

0000062a <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 62a:	20 91 6e 00 	lds	r18, 0x006E
 62e:	2f 5f       	subi	r18, 0xFF	; 255
 630:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
 632:	90 91 6d 00 	lds	r25, 0x006D
 636:	29 17       	cp	r18, r25
 638:	e1 f3       	breq	.-8      	; 0x632 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 63a:	e2 2f       	mov	r30, r18
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	e1 59       	subi	r30, 0x91	; 145
 640:	ff 4f       	sbci	r31, 0xFF	; 255
 642:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 644:	20 93 6e 00 	sts	0x006E, r18
 648:	08 95       	ret

0000064a <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
 64a:	90 91 80 00 	lds	r25, 0x0080
 64e:	80 91 7f 00 	lds	r24, 0x007F
 652:	98 17       	cp	r25, r24
 654:	d1 f3       	breq	.-12     	; 0x64a <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 656:	80 91 7f 00 	lds	r24, 0x007F
 65a:	8f 5f       	subi	r24, 0xFF	; 255
 65c:	8f 70       	andi	r24, 0x0F	; 15
 65e:	80 93 7f 00 	sts	0x007F, r24

  // return data from the buffer.
  return rxBuf[ rxTail ];
 662:	e0 91 7f 00 	lds	r30, 0x007F
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	ef 57       	subi	r30, 0x7F	; 127
 66a:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
 66c:	80 81       	ld	r24, Z
 66e:	08 95       	ret

00000670 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 670:	20 91 80 00 	lds	r18, 0x0080
 674:	90 91 7f 00 	lds	r25, 0x007F
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	29 13       	cpse	r18, r25
 67c:	01 c0       	rjmp	.+2      	; 0x680 <usiTwiDataInReceiveBuffer+0x10>
 67e:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 680:	08 95       	ret

00000682 <usiTwiAmountDataInReceiveBuffer>:

uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    if (rxHead == rxTail)
 682:	90 91 80 00 	lds	r25, 0x0080
 686:	80 91 7f 00 	lds	r24, 0x007F
 68a:	98 17       	cp	r25, r24
 68c:	99 f0       	breq	.+38     	; 0x6b4 <usiTwiAmountDataInReceiveBuffer+0x32>
    {
        return 0;
    }
    if (rxHead < rxTail)
 68e:	90 91 80 00 	lds	r25, 0x0080
 692:	80 91 7f 00 	lds	r24, 0x007F
 696:	98 17       	cp	r25, r24
 698:	38 f4       	brcc	.+14     	; 0x6a8 <usiTwiAmountDataInReceiveBuffer+0x26>
    {
        // Is there a better way ?
        return ((int8_t)rxHead - (int8_t)rxTail) + TWI_RX_BUFFER_SIZE;
 69a:	80 91 80 00 	lds	r24, 0x0080
 69e:	90 91 7f 00 	lds	r25, 0x007F
 6a2:	80 5f       	subi	r24, 0xF0	; 240
 6a4:	89 1b       	sub	r24, r25
 6a6:	08 95       	ret
    }
    return rxHead - rxTail;
 6a8:	80 91 80 00 	lds	r24, 0x0080
 6ac:	90 91 7f 00 	lds	r25, 0x007F
 6b0:	89 1b       	sub	r24, r25
 6b2:	08 95       	ret

uint8_t usiTwiAmountDataInReceiveBuffer(void)
{
    if (rxHead == rxTail)
    {
        return 0;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
    {
        // Is there a better way ?
        return ((int8_t)rxHead - (int8_t)rxTail) + TWI_RX_BUFFER_SIZE;
    }
    return rxHead - rxTail;
}
 6b6:	08 95       	ret

000006b8 <__vector_7>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	8f 93       	push	r24
  // This triggers on second write, but claims to the callback there is only *one* byte in buffer
  USI_RECEIVE_CALLBACK();
  */

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 6c4:	10 92 91 00 	sts	0x0091, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 6c8:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 6ca:	b2 9b       	sbis	0x16, 2	; 22
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__vector_7+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 6ce:	b0 9b       	sbis	0x16, 0	; 22
 6d0:	fc cf       	rjmp	.-8      	; 0x6ca <__vector_7+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 6d2:	b0 99       	sbic	0x16, 0	; 22
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <__vector_7+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 6d6:	88 ef       	ldi	r24, 0xF8	; 248
 6d8:	8d b9       	out	0x0d, r24	; 13
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <__vector_7+0x28>
  }
  else
  {
    // a Stop Condition did occur

    USICR =
 6dc:	88 ea       	ldi	r24, 0xA8	; 168
 6de:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 6e0:	80 ef       	ldi	r24, 0xF0	; 240
 6e2:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);


} // end ISR( USI_START_VECTOR )
 6e4:	8f 91       	pop	r24
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_8>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31

  switch ( overflowState )
 716:	80 91 91 00 	lds	r24, 0x0091
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	09 f4       	brne	.+2      	; 0x720 <__vector_8+0x30>
 71e:	73 c0       	rjmp	.+230    	; 0x806 <__vector_8+0x116>
 720:	28 f4       	brcc	.+10     	; 0x72c <__vector_8+0x3c>
 722:	88 23       	and	r24, r24
 724:	59 f0       	breq	.+22     	; 0x73c <__vector_8+0x4c>
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	a1 f1       	breq	.+104    	; 0x792 <__vector_8+0xa2>
 72a:	9d c0       	rjmp	.+314    	; 0x866 <__vector_8+0x176>
 72c:	84 30       	cpi	r24, 0x04	; 4
 72e:	09 f4       	brne	.+2      	; 0x732 <__vector_8+0x42>
 730:	72 c0       	rjmp	.+228    	; 0x816 <__vector_8+0x126>
 732:	38 f1       	brcs	.+78     	; 0x782 <__vector_8+0x92>
 734:	85 30       	cpi	r24, 0x05	; 5
 736:	09 f4       	brne	.+2      	; 0x73a <__vector_8+0x4a>
 738:	75 c0       	rjmp	.+234    	; 0x824 <__vector_8+0x134>
 73a:	95 c0       	rjmp	.+298    	; 0x866 <__vector_8+0x176>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 73c:	8f b1       	in	r24, 0x0f	; 15
 73e:	88 23       	and	r24, r24
 740:	31 f0       	breq	.+12     	; 0x74e <__vector_8+0x5e>
 742:	9f b1       	in	r25, 0x0f	; 15
 744:	96 95       	lsr	r25
 746:	80 91 92 00 	lds	r24, 0x0092
 74a:	98 13       	cpse	r25, r24
 74c:	15 c0       	rjmp	.+42     	; 0x778 <__vector_8+0x88>
      {
         // callback
         if(_onTwiDataRequest) _onTwiDataRequest();
 74e:	e0 91 97 00 	lds	r30, 0x0097
 752:	f0 91 98 00 	lds	r31, 0x0098
 756:	30 97       	sbiw	r30, 0x00	; 0
 758:	09 f0       	breq	.+2      	; 0x75c <__vector_8+0x6c>
 75a:	09 95       	icall
         if ( USIDR & 0x01 )
 75c:	78 9b       	sbis	0x0f, 0	; 15
 75e:	04 c0       	rjmp	.+8      	; 0x768 <__vector_8+0x78>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	80 93 91 00 	sts	0x0091, r24
 766:	03 c0       	rjmp	.+6      	; 0x76e <__vector_8+0x7e>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	80 93 91 00 	sts	0x0091, r24
        } // end if
        SET_USI_TO_SEND_ACK( );
 76e:	1f b8       	out	0x0f, r1	; 15
 770:	b8 9a       	sbi	0x17, 0	; 23
 772:	8e e7       	ldi	r24, 0x7E	; 126
 774:	8e b9       	out	0x0e, r24	; 14
 776:	77 c0       	rjmp	.+238    	; 0x866 <__vector_8+0x176>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 778:	88 ea       	ldi	r24, 0xA8	; 168
 77a:	8d b9       	out	0x0d, r24	; 13
 77c:	80 e7       	ldi	r24, 0x70	; 112
 77e:	8e b9       	out	0x0e, r24	; 14
 780:	72 c0       	rjmp	.+228    	; 0x866 <__vector_8+0x176>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 782:	8f b1       	in	r24, 0x0f	; 15
 784:	88 23       	and	r24, r24
 786:	29 f0       	breq	.+10     	; 0x792 <__vector_8+0xa2>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 788:	88 ea       	ldi	r24, 0xA8	; 168
 78a:	8d b9       	out	0x0d, r24	; 13
 78c:	80 e7       	ldi	r24, 0x70	; 112
 78e:	8e b9       	out	0x0e, r24	; 14
        return;
 790:	6a c0       	rjmp	.+212    	; 0x866 <__vector_8+0x176>
      // master sent an ACK

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      USI_REQUEST_CALLBACK();
 792:	80 91 95 00 	lds	r24, 0x0095
 796:	90 91 96 00 	lds	r25, 0x0096
 79a:	89 2b       	or	r24, r25
 79c:	51 f0       	breq	.+20     	; 0x7b2 <__vector_8+0xc2>
 79e:	68 df       	rcall	.-304    	; 0x670 <usiTwiDataInReceiveBuffer>
 7a0:	88 23       	and	r24, r24
 7a2:	39 f0       	breq	.+14     	; 0x7b2 <__vector_8+0xc2>
 7a4:	c0 91 95 00 	lds	r28, 0x0095
 7a8:	d0 91 96 00 	lds	r29, 0x0096
 7ac:	6a df       	rcall	.-300    	; 0x682 <usiTwiAmountDataInReceiveBuffer>
 7ae:	fe 01       	movw	r30, r28
 7b0:	09 95       	icall
 7b2:	e0 91 93 00 	lds	r30, 0x0093
 7b6:	f0 91 94 00 	lds	r31, 0x0094
 7ba:	30 97       	sbiw	r30, 0x00	; 0
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <__vector_8+0xd0>
 7be:	09 95       	icall
      // Get data from Buffer
      if ( txHead != txTail )
 7c0:	90 91 6e 00 	lds	r25, 0x006E
 7c4:	80 91 6d 00 	lds	r24, 0x006D
 7c8:	98 17       	cp	r25, r24
 7ca:	a1 f0       	breq	.+40     	; 0x7f4 <__vector_8+0x104>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 7cc:	80 91 6d 00 	lds	r24, 0x006D
 7d0:	8f 5f       	subi	r24, 0xFF	; 255
 7d2:	8f 70       	andi	r24, 0x0F	; 15
 7d4:	80 93 6d 00 	sts	0x006D, r24
        USIDR = txBuf[ txTail ];
 7d8:	e0 91 6d 00 	lds	r30, 0x006D
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	e1 59       	subi	r30, 0x91	; 145
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	80 81       	ld	r24, Z
 7e4:	8f b9       	out	0x0f, r24	; 15
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 7e6:	82 e0       	ldi	r24, 0x02	; 2
 7e8:	80 93 91 00 	sts	0x0091, r24
      SET_USI_TO_SEND_DATA( );
 7ec:	b8 9a       	sbi	0x17, 0	; 23
 7ee:	80 e7       	ldi	r24, 0x70	; 112
 7f0:	8e b9       	out	0x0e, r24	; 14
      break;
 7f2:	39 c0       	rjmp	.+114    	; 0x866 <__vector_8+0x176>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_READ_ACK( ); // This might be neccessary sometimes see http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=805227#805227
 7f4:	b8 98       	cbi	0x17, 0	; 23
 7f6:	1f b8       	out	0x0f, r1	; 15
 7f8:	8e e7       	ldi	r24, 0x7E	; 126
 7fa:	8e b9       	out	0x0e, r24	; 14
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 7fc:	88 ea       	ldi	r24, 0xA8	; 168
 7fe:	8d b9       	out	0x0d, r24	; 13
 800:	80 e7       	ldi	r24, 0x70	; 112
 802:	8e b9       	out	0x0e, r24	; 14
        return;
 804:	30 c0       	rjmp	.+96     	; 0x866 <__vector_8+0x176>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 806:	83 e0       	ldi	r24, 0x03	; 3
 808:	80 93 91 00 	sts	0x0091, r24
      SET_USI_TO_READ_ACK( );
 80c:	b8 98       	cbi	0x17, 0	; 23
 80e:	1f b8       	out	0x0f, r1	; 15
 810:	8e e7       	ldi	r24, 0x7E	; 126
 812:	8e b9       	out	0x0e, r24	; 14
      break;
 814:	28 c0       	rjmp	.+80     	; 0x866 <__vector_8+0x176>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 816:	85 e0       	ldi	r24, 0x05	; 5
 818:	80 93 91 00 	sts	0x0091, r24
      SET_USI_TO_READ_DATA( );
 81c:	b8 98       	cbi	0x17, 0	; 23
 81e:	80 e7       	ldi	r24, 0x70	; 112
 820:	8e b9       	out	0x0e, r24	; 14
      break;
 822:	21 c0       	rjmp	.+66     	; 0x866 <__vector_8+0x176>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 824:	80 91 80 00 	lds	r24, 0x0080
 828:	8f 5f       	subi	r24, 0xFF	; 255
 82a:	8f 70       	andi	r24, 0x0F	; 15
 82c:	80 93 80 00 	sts	0x0080, r24
      // check buffer size
      if (rxHead == rxTail) {
 830:	90 91 80 00 	lds	r25, 0x0080
 834:	80 91 7f 00 	lds	r24, 0x007F
 838:	98 13       	cpse	r25, r24
 83a:	07 c0       	rjmp	.+14     	; 0x84a <__vector_8+0x15a>
        // overrun
        rxHead = (rxHead + TWI_RX_BUFFER_SIZE - 1) & TWI_RX_BUFFER_MASK;
 83c:	80 91 80 00 	lds	r24, 0x0080
 840:	81 5f       	subi	r24, 0xF1	; 241
 842:	8f 70       	andi	r24, 0x0F	; 15
 844:	80 93 80 00 	sts	0x0080, r24
 848:	07 c0       	rjmp	.+14     	; 0x858 <__vector_8+0x168>
      } else {
        rxBuf[ rxHead ] = USIDR;
 84a:	e0 91 80 00 	lds	r30, 0x0080
 84e:	8f b1       	in	r24, 0x0f	; 15
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	ef 57       	subi	r30, 0x7F	; 127
 854:	ff 4f       	sbci	r31, 0xFF	; 255
 856:	80 83       	st	Z, r24
      }
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 858:	84 e0       	ldi	r24, 0x04	; 4
 85a:	80 93 91 00 	sts	0x0091, r24
      SET_USI_TO_SEND_ACK( );
 85e:	1f b8       	out	0x0f, r1	; 15
 860:	b8 9a       	sbi	0x17, 0	; 23
 862:	8e e7       	ldi	r24, 0x7E	; 126
 864:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	bf 91       	pop	r27
 870:	af 91       	pop	r26
 872:	9f 91       	pop	r25
 874:	8f 91       	pop	r24
 876:	7f 91       	pop	r23
 878:	6f 91       	pop	r22
 87a:	5f 91       	pop	r21
 87c:	4f 91       	pop	r20
 87e:	3f 91       	pop	r19
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>
